{
  "stats": {
    "suites": 12,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-23T06:14:13.693Z",
    "end": "2023-06-23T06:14:13.843Z",
    "duration": 150,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "67c1d65c-b50f-4738-957f-b62c0f1016b8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "53dbd41b-920f-40a0-bf44-05615db39da0",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\getAll.record.controller.test.js",
          "file": "\\test-case\\getAll.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3124a756-1132-4514-a3da-762e396f9f97",
              "title": "Get /record",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\getAll.record.controller.test.js",
              "file": "\\test-case\\getAll.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should get all the record of database",
                  "fullTitle": "Record Controller Get /record Should get all the record of database",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get(\"/api/v1/record\");\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body).to.have.property(\"records\");\nexpect(res.body.records).to.be.an.instanceof(Array);",
                  "err": {},
                  "uuid": "edd194e1-bc3c-43cf-9415-340011d2f6f9",
                  "parentUUID": "3124a756-1132-4514-a3da-762e396f9f97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edd194e1-bc3c-43cf-9415-340011d2f6f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "21cd53d8-a342-43de-8f3e-172936588210",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\getById.record.controller.test.js",
          "file": "\\test-case\\getById.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5a4522b-b7ff-415f-9992-9a61c7f27236",
              "title": "GET /record/:id",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\getById.record.controller.test.js",
              "file": "\\test-case\\getById.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should get a record by ID",
                  "fullTitle": "Record Controller GET /record/:id Should get a record by ID",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 22;\nconst res = await chai.request(app).get(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body).to.have.property(\"record\");\nexpect(res.body.record).to.be.an.instanceof(Object);",
                  "err": {},
                  "uuid": "0b0b0b9c-2f47-4c49-9ef3-684dc6074409",
                  "parentUUID": "a5a4522b-b7ff-415f-9992-9a61c7f27236",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record not found' error for non-existent ID",
                  "fullTitle": "Record Controller GET /record/:id Should throw 'Record not found' error for non-existent ID",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 1;\nconst res = await chai.request(app).get(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(404);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record not found\");",
                  "err": {},
                  "uuid": "476b64db-5522-4ecf-86a0-57b222025837",
                  "parentUUID": "a5a4522b-b7ff-415f-9992-9a61c7f27236",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should handle internal server errors",
                  "fullTitle": "Record Controller GET /record/:id Should handle internal server errors",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 22;\nsinon.stub(Record, \"findByPk\").throws(new Error(\"Database error\"));\nconst res = await chai.request(app).get(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(500);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record fetch failed\");\nRecord.findByPk.restore();",
                  "err": {},
                  "uuid": "60ea4046-9ffc-47a0-8542-8b0f1144be3d",
                  "parentUUID": "a5a4522b-b7ff-415f-9992-9a61c7f27236",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b0b0b9c-2f47-4c49-9ef3-684dc6074409",
                "476b64db-5522-4ecf-86a0-57b222025837",
                "60ea4046-9ffc-47a0-8542-8b0f1144be3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e6634fce-e517-4e44-a8e2-ea201745303a",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\post.record.controller.test.js",
          "file": "\\test-case\\post.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82430da8-ce89-47e4-93ef-53a75696d0a1",
              "title": "POST /record",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\post.record.controller.test.js",
              "file": "\\test-case\\post.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should create a new record",
                  "fullTitle": "Record Controller POST /record Should create a new record",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordData = {\n  name: \"someone\",\n  email: \"example@gmail.com\",\n  number: \"1234567890\",\n};\nconst res = await chai\n  .request(app)\n  .post(\"/api/v1/record\")\n  .send(recordData);\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body).to.have.property(\"record\");\nexpect(res.body.record)\n  .to.have.property(\"email\")\n  .to.equal(recordData.email);\nexpect(res.body.record)\n  .to.have.property(\"number\")\n  .to.equal(recordData.number);",
                  "err": {},
                  "uuid": "23a055a4-4a3d-4e09-ad3f-43808047662b",
                  "parentUUID": "82430da8-ce89-47e4-93ef-53a75696d0a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return a 400 error if name,email or number is not provided",
                  "fullTitle": "Record Controller POST /record Should return a 400 error if name,email or number is not provided",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordData = {\n  email: \"example@gmail.com\",\n};\nconst res = await chai\n  .request(app)\n  .post(\"/api/v1/record\")\n  .send(recordData);\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "42d89aba-1323-47e3-b348-bcbaa7857155",
                  "parentUUID": "82430da8-ce89-47e4-93ef-53a75696d0a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23a055a4-4a3d-4e09-ad3f-43808047662b",
                "42d89aba-1323-47e3-b348-bcbaa7857155"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5732b324-3a42-4d93-a4a1-4ed913ed64dd",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\remove.record.controller.test.js",
          "file": "\\test-case\\remove.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4f93cd6a-f03f-40bf-aacd-6deb143bd05d",
              "title": "DELETE /record/:id",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\remove.record.controller.test.js",
              "file": "\\test-case\\remove.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should remove the exising record",
                  "fullTitle": "Record Controller DELETE /record/:id Should remove the exising record",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = 33;\nconst res = await chai.request(app).delete(`/api/v1/record/${id}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body)\n  .to.have.property(\"msg\")\n  .to.equal(\"Record deleted successfully\");",
                  "err": {},
                  "uuid": "3744af0b-09d1-4923-b9e9-509a8a1de25b",
                  "parentUUID": "4f93cd6a-f03f-40bf-aacd-6deb143bd05d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record not found' error for non-existent ID in delete api",
                  "fullTitle": "Record Controller DELETE /record/:id Should throw 'Record not found' error for non-existent ID in delete api",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 1;\nconst res = await chai.request(app).delete(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(404);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record not found\");",
                  "err": {},
                  "uuid": "8bf7c049-b0b2-4dd3-97de-dc1fef153f07",
                  "parentUUID": "4f93cd6a-f03f-40bf-aacd-6deb143bd05d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3744af0b-09d1-4923-b9e9-509a8a1de25b",
                "8bf7c049-b0b2-4dd3-97de-dc1fef153f07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93a0b479-c585-4008-9fde-adb1f04e85e4",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\search.record.controller.test.js",
          "file": "\\test-case\\search.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "480d9d70-0198-4f3a-91c2-b8c48541f1fd",
              "title": "GET /api/v1/record/search",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\search.record.controller.test.js",
              "file": "\\test-case\\search.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve records based on search criteria",
                  "fullTitle": "Record Controller GET /api/v1/record/search should retrieve records based on search criteria",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Define the search criteria\nconst name = \"john\";\n// Send the request to the search endpoint with the query parameters\nconst res = await chai\n  .request(app)\n  .get(\"/api/v1/record/search\")\n  .query({ name });\n// Assert the response\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body).to.have.property(\"records\");\nexpect(res.body.records).to.be.an.instanceof(Array);\n//check if the retrieved records match the search criteria\nfor (const record of res.body.records) {\n  expect(record.name).to.equal(name);\n}",
                  "err": {},
                  "uuid": "041d87a5-85bd-4d2d-aab5-ffac2f61066b",
                  "parentUUID": "480d9d70-0198-4f3a-91c2-b8c48541f1fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "041d87a5-85bd-4d2d-aab5-ffac2f61066b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e87b3008-a8b0-4ece-b34d-7cd4100a8b6a",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\update.record.controller.test.js",
          "file": "\\test-case\\update.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c1b2127-162c-49c9-afd1-6a138f0db29a",
              "title": "PATCH /record/:id",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\update.record.controller.test.js",
              "file": "\\test-case\\update.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should update the exising record",
                  "fullTitle": "Record Controller PATCH /record/:id Should update the exising record",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordData = {\n  name: \"modified\",\n  email: \"examplemodified@gmail.com\",\n  number: \"0000000000\",\n};\nconst id = 22;\nconst res = await chai\n  .request(app)\n  .patch(`/api/v1/record/${id}`)\n  .send(recordData);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body)\n  .to.have.property(\"updatedRecord\")\n  .to.have.all.keys(\n    \"id\",\n    \"name\",\n    \"email\",\n    \"number\",\n    \"createdAt\",\n    \"updatedAt\"\n  );\nexpect(res.body.updatedRecord).to.shallowDeepEqual(recordData);",
                  "err": {},
                  "uuid": "476a3250-206f-461c-9f1b-b3526259d24d",
                  "parentUUID": "3c1b2127-162c-49c9-afd1-6a138f0db29a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record not found' error for non-existent ID in update api",
                  "fullTitle": "Record Controller PATCH /record/:id Should throw 'Record not found' error for non-existent ID in update api",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 1;\nconst res = await chai.request(app).patch(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(404);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record not found\");",
                  "err": {},
                  "uuid": "c8f01ac7-b419-490e-b3f5-1563065e9558",
                  "parentUUID": "3c1b2127-162c-49c9-afd1-6a138f0db29a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record update failed' error when database update fails",
                  "fullTitle": "Record Controller PATCH /record/:id Should throw 'Record update failed' error when database update fails",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simulate a scenario where database update fails\nsinon.stub(Record, \"findByPk\").resolves({ id: 22 });\nsinon\n  .stub(Record.prototype, \"update\")\n  .throws(new Error(\"Database error\"));\nconst recordId = 22;\nconst recordData = {\n  email: \"examplemodified@gmail.com\",\n  number: \"0000000000\",\n};\nconst res = await chai\n  .request(app)\n  .patch(`/api/v1/record/${recordId}`)\n  .send(recordData);\nexpect(res).to.have.status(500);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record update failed\");\n// Restore the stubbed methods\nsinon.restore();",
                  "err": {},
                  "uuid": "953897c6-ae3e-413b-bbf5-eb682101856a",
                  "parentUUID": "3c1b2127-162c-49c9-afd1-6a138f0db29a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "476a3250-206f-461c-9f1b-b3526259d24d",
                "c8f01ac7-b419-490e-b3f5-1563065e9558",
                "953897c6-ae3e-413b-bbf5-eb682101856a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Report",
        "": true
      },
      "version": "6.2.0"
    }
  }
}