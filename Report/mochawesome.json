{
  "stats": {
    "suites": 10,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-23T04:21:22.350Z",
    "end": "2023-06-23T04:21:22.493Z",
    "duration": 143,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f49e29ed-4a8e-4b5e-aad2-94edfa2803e0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7d501ebe-2f90-4ed0-8efa-570e4fe5373f",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\getAll.record.controller.test.js",
          "file": "\\test-case\\getAll.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cf556077-32f0-4e7d-9319-3451f528d5ba",
              "title": "Get /record",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\getAll.record.controller.test.js",
              "file": "\\test-case\\getAll.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should get all the record of database",
                  "fullTitle": "Record Controller Get /record Should get all the record of database",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get(\"/api/v1/record\");\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body).to.have.property(\"records\");\nexpect(res.body.records).to.be.an.instanceof(Array);",
                  "err": {},
                  "uuid": "b7593bc1-ebed-4b55-9142-fee308b07b7e",
                  "parentUUID": "cf556077-32f0-4e7d-9319-3451f528d5ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7593bc1-ebed-4b55-9142-fee308b07b7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dc1f3a2d-d7c9-446e-a206-f858860bf7b3",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\getById.record.controller.test.js",
          "file": "\\test-case\\getById.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "58168d9e-3635-44ba-8ab5-6efcfec6e8e1",
              "title": "GET /record/:id",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\getById.record.controller.test.js",
              "file": "\\test-case\\getById.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should get a record by ID",
                  "fullTitle": "Record Controller GET /record/:id Should get a record by ID",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 22;\nconst res = await chai.request(app).get(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body).to.have.property(\"record\");\nexpect(res.body.record).to.be.an.instanceof(Object);",
                  "err": {},
                  "uuid": "f447b228-4ded-4da3-8f7e-72b71a6703aa",
                  "parentUUID": "58168d9e-3635-44ba-8ab5-6efcfec6e8e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record not found' error for non-existent ID",
                  "fullTitle": "Record Controller GET /record/:id Should throw 'Record not found' error for non-existent ID",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 1;\nconst res = await chai.request(app).get(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(404);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record not found\");",
                  "err": {},
                  "uuid": "dff96709-338b-440f-8449-b426579abc44",
                  "parentUUID": "58168d9e-3635-44ba-8ab5-6efcfec6e8e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should handle internal server errors",
                  "fullTitle": "Record Controller GET /record/:id Should handle internal server errors",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 22;\nsinon.stub(Record, \"findByPk\").throws(new Error(\"Database error\"));\nconst res = await chai.request(app).get(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(500);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record fetch failed\");\nRecord.findByPk.restore();",
                  "err": {},
                  "uuid": "3a8c308c-44dd-466f-8722-38eb72ef81a9",
                  "parentUUID": "58168d9e-3635-44ba-8ab5-6efcfec6e8e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f447b228-4ded-4da3-8f7e-72b71a6703aa",
                "dff96709-338b-440f-8449-b426579abc44",
                "3a8c308c-44dd-466f-8722-38eb72ef81a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "216e39af-4a21-4620-ad73-3c0c1bf49d9e",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\post.record.controller.test.js",
          "file": "\\test-case\\post.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e40cf4f3-4a25-4725-9282-5fafa1823dab",
              "title": "POST /record",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\post.record.controller.test.js",
              "file": "\\test-case\\post.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should create a new record",
                  "fullTitle": "Record Controller POST /record Should create a new record",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordData = {\n  name: \"someone\",\n  email: \"example@gmail.com\",\n  number: \"1234567890\",\n};\nconst res = await chai\n  .request(app)\n  .post(\"/api/v1/record\")\n  .send(recordData);\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body).to.have.property(\"record\");\nexpect(res.body.record)\n  .to.have.property(\"email\")\n  .to.equal(recordData.email);\nexpect(res.body.record)\n  .to.have.property(\"number\")\n  .to.equal(recordData.number);",
                  "err": {},
                  "uuid": "dbb8bf84-3112-4479-a651-0dd27e4093dc",
                  "parentUUID": "e40cf4f3-4a25-4725-9282-5fafa1823dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return a 400 error if name,email or number is not provided",
                  "fullTitle": "Record Controller POST /record Should return a 400 error if name,email or number is not provided",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordData = {\n  email: \"example@gmail.com\",\n};\nconst res = await chai\n  .request(app)\n  .post(\"/api/v1/record\")\n  .send(recordData);\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "ff13e840-864e-4730-a988-592a11305787",
                  "parentUUID": "e40cf4f3-4a25-4725-9282-5fafa1823dab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbb8bf84-3112-4479-a651-0dd27e4093dc",
                "ff13e840-864e-4730-a988-592a11305787"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5699fc6e-385d-4954-a096-50f9f57d01cc",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\remove.record.controller.test.js",
          "file": "\\test-case\\remove.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f56ba135-db76-4596-97e0-17e8ee4b5008",
              "title": "DELETE /record/:id",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\remove.record.controller.test.js",
              "file": "\\test-case\\remove.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should remove the exising record",
                  "fullTitle": "Record Controller DELETE /record/:id Should remove the exising record",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = 33;\nconst res = await chai.request(app).delete(`/api/v1/record/${id}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body)\n  .to.have.property(\"msg\")\n  .to.equal(\"Record deleted successfully\");",
                  "err": {},
                  "uuid": "5626279b-f1ae-46d8-8307-86867fd80268",
                  "parentUUID": "f56ba135-db76-4596-97e0-17e8ee4b5008",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record not found' error for non-existent ID in delete api",
                  "fullTitle": "Record Controller DELETE /record/:id Should throw 'Record not found' error for non-existent ID in delete api",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 1;\nconst res = await chai.request(app).delete(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(404);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record not found\");",
                  "err": {},
                  "uuid": "fccd03bf-42b4-4de6-841f-0a819b176fc4",
                  "parentUUID": "f56ba135-db76-4596-97e0-17e8ee4b5008",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5626279b-f1ae-46d8-8307-86867fd80268",
                "fccd03bf-42b4-4de6-841f-0a819b176fc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f1db8ef-8399-4a46-ad2d-572f746b6462",
          "title": "Record Controller",
          "fullFile": "E:\\NODE.JS\\records\\test-case\\update.record.controller.test.js",
          "file": "\\test-case\\update.record.controller.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5b484418-3008-41c8-b3eb-d8ba3a2e6b40",
              "title": "PATCH /record/:id",
              "fullFile": "E:\\NODE.JS\\records\\test-case\\update.record.controller.test.js",
              "file": "\\test-case\\update.record.controller.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should update the exising record",
                  "fullTitle": "Record Controller PATCH /record/:id Should update the exising record",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordData = {\n  name: \"modified\",\n  email: \"examplemodified@gmail.com\",\n  number: \"0000000000\",\n};\nconst id = 22;\nconst res = await chai\n  .request(app)\n  .patch(`/api/v1/record/${id}`)\n  .send(recordData);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property(\"status\").to.equal(true);\nexpect(res.body)\n  .to.have.property(\"updatedRecord\")\n  .to.have.all.keys(\n    \"id\",\n    \"name\",\n    \"email\",\n    \"number\",\n    \"createdAt\",\n    \"updatedAt\"\n  );\nexpect(res.body.updatedRecord).to.shallowDeepEqual(recordData);",
                  "err": {},
                  "uuid": "5f9e90f5-384a-496e-b448-5a2f168068a8",
                  "parentUUID": "5b484418-3008-41c8-b3eb-d8ba3a2e6b40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record not found' error for non-existent ID in update api",
                  "fullTitle": "Record Controller PATCH /record/:id Should throw 'Record not found' error for non-existent ID in update api",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const recordId = 1;\nconst res = await chai.request(app).patch(`/api/v1/record/${recordId}`);\nexpect(res).to.have.status(404);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record not found\");",
                  "err": {},
                  "uuid": "14396f47-b25e-468e-9106-6aca191399b4",
                  "parentUUID": "5b484418-3008-41c8-b3eb-d8ba3a2e6b40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should throw 'Record update failed' error when database update fails",
                  "fullTitle": "Record Controller PATCH /record/:id Should throw 'Record update failed' error when database update fails",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simulate a scenario where database update fails\nsinon.stub(Record, \"findByPk\").resolves({ id: 22 });\nsinon\n  .stub(Record.prototype, \"update\")\n  .throws(new Error(\"Database error\"));\nconst recordId = 22;\nconst recordData = {\n  email: \"examplemodified@gmail.com\",\n  number: \"0000000000\",\n};\nconst res = await chai\n  .request(app)\n  .patch(`/api/v1/record/${recordId}`)\n  .send(recordData);\nexpect(res).to.have.status(500);\nexpect(res.body).to.have.property(\"msg\").to.equal(\"Record update failed\");\n// Restore the stubbed methods\nsinon.restore();",
                  "err": {},
                  "uuid": "bc335945-35dd-4632-b6aa-b8eb2b075e7c",
                  "parentUUID": "5b484418-3008-41c8-b3eb-d8ba3a2e6b40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f9e90f5-384a-496e-b448-5a2f168068a8",
                "14396f47-b25e-468e-9106-6aca191399b4",
                "bc335945-35dd-4632-b6aa-b8eb2b075e7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Report",
        "": true
      },
      "version": "6.2.0"
    }
  }
}